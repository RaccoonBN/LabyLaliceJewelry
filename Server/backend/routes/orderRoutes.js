const express = require("express");
const router = express.Router();
const pool = require("../db");

// üìå 1Ô∏è‚É£ API l·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng (Admin)
router.get("/all", async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();

        // Thay ƒë·ªïi th·ª© t·ª± s·∫Øp x·∫øp
        const queryOrders = `
      SELECT
        o.id AS order_id,
        o.fullname AS customer_name,
        o.phone AS customer_phone,
        o.address AS customer_address,
        o.total AS total_price,
        o.payment_method,
        o.payment_status,
        o.status,
        o.created_at
      FROM orders o
      ORDER BY o.created_at DESC; -- S·∫Øp x·∫øp theo th·ªùi gian t·∫°o ƒë∆°n h√†ng gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
    `;

        const [orders] = await connection.execute(queryOrders);

        // L·∫∑p qua t·ª´ng ƒë∆°n h√†ng ƒë·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m
        const orderPromises = orders.map(async (order) => {
            const queryOrderItems = `
        SELECT
          p.id,
          p.name,
          oi.quantity,
          p.price
        FROM order_items oi
        LEFT JOIN products p ON oi.product_id = p.id
        WHERE oi.order_id = ?;
      `;

            const [products] = await connection.execute(queryOrderItems, [
                order.order_id,
            ]);
            order.products = products; // Th√™m danh s√°ch s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
            return order;
        });

        const ordersWithProducts = await Promise.all(orderPromises);
        res.json(ordersWithProducts);
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
        return res.status(500).json({ error: "L·ªói server" });
    } finally {
        if (connection) connection.release();
    }
});

// üìå 2Ô∏è‚É£ API xem chi ti·∫øt ƒë∆°n h√†ng (Admin)
router.get("/:orderId", async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const { orderId } = req.params;

        // L·∫•y th√¥ng tin ƒë∆°n h√†ng
        const [order] = await connection.execute(
            "SELECT * FROM orders WHERE id = ?",
            [orderId]
        );

        if (order.length === 0) {
            return res.status(404).json({ error: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
        }

        // L·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng
        const [orderItems] = await connection.execute(
            `
      SELECT oi.*, p.name, p.image 
      FROM order_items oi 
      JOIN products p ON oi.product_id = p.id 
      WHERE oi.order_id = ?
    `,
            [orderId]
        );

        res.json({ order: order[0], items: orderItems });
    } catch (error) {
        console.error("L·ªói l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);
        return res.status(500).json({ error: "L·ªói server" });
    } finally {
        if (connection) connection.release();
    }
});

// üìå 3Ô∏è‚É£ API c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (Admin)
router.put("/:orderId/status", async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const { orderId } = req.params;
        const { status } = req.body;

        const [result] = await connection.execute(
            "UPDATE orders SET status = ? WHERE id = ?",
            [status, orderId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
        }

        res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng" });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
        return res.status(500).json({ error: "L·ªói server" });
    } finally {
        if (connection) connection.release();
    }
});

module.exports = router;
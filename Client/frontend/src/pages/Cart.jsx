import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "./Cart.css";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Cart = () => {
  const [cartItems, setCartItems] = useState([]);
  const [userId, setUserId] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      console.error("Ch∆∞a c√≥ token!");
      setLoading(false);
      return;
    }

    axios
      .get("http://localhost:2000/auth/profile", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((response) => {
        if (response.data?.id) {
          setUserId(response.data.id);
        } else {
          console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c userId t·ª´ profile");
        }
      })
      .catch((error) => console.error("L·ªói khi l·∫•y profile:", error))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    if (!userId) return;

    axios
      .get(`http://localhost:2000/cart/${userId}`)
      .then((response) => {
        const cartData = response.data.map((item) => ({
          ...item,
          checked: false, // M·∫∑c ƒë·ªãnh ch∆∞a ch·ªçn
        }));
        setCartItems(cartData || []);
      })
      .catch((error) => console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", error));
  }, [userId]);

  const toggleCheckbox = (id) => {
    setCartItems((prevItems) =>
      prevItems.map((item) =>
        item.id === id ? { ...item, checked: !item.checked } : item
      )
    );
  };
  const updateQuantity = (id, delta) => {
    if (!userId) return;
  
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong gi·ªè h√†ng tr√™n UI tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu
    setCartItems((prevItems) =>
      prevItems.map((item) => {
        if (item.id === id) {
          const newQuantity = Math.max(1, item.quantity + delta); // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng kh√¥ng nh·ªè h∆°n 1
          return { ...item, quantity: newQuantity };
        }
        return item;
      })
    );
  
    // T√¨m item sau khi ƒë√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë·ªÉ log gi√° tr·ªã ch√≠nh x√°c
    const updatedItem = cartItems.find((item) => item.id === id);
    console.log("Updating quantity with params:", { userId, cartItemId: id, quantity: updatedItem ? updatedItem.quantity + delta : 0 });
  
    // G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    axios
      .put("http://localhost:2000/cart/updateQuantity", {
        cartItemId: id, // S·ª≠ d·ª•ng cartItemId thay v√¨ id
        quantity: Math.max(1, delta), // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng, ƒë·∫£m b·∫£o >= 1
      })
      .then(() => {
        toast.success("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!", {
          position: "top-right",
          autoClose: 2000,
        });
      })
      .catch((error) => {
        console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
        toast.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!", {
          position: "top-right",
          autoClose: 2000,
        });
      });
  };
  
  const removeItem = (id) => {
    if (!userId) return;

    axios
      .post("http://localhost:2000/cart/removeItem", { cartItemId: id })
      .then(() => {
        setCartItems((prevItems) => prevItems.filter((item) => item.id !== id));
        toast.success("üóëÔ∏è S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!", {
          position: "top-right",
          autoClose: 2000,
        });
      })
      .catch((error) => {
        console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
        toast.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m!", {
          position: "top-right",
          autoClose: 2000,
        });
      });
  };

  const handleCheckout = () => {
    const selectedItems = cartItems.filter((item) => item.checked);
    if (selectedItems.length === 0) {
      toast.error("‚ùå Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n!", {
        position: "top-right",
        autoClose: 2000,
      });
      return;
    }

    localStorage.setItem("checkoutItems", JSON.stringify(selectedItems));

    toast.success("‚úÖ Chuy·ªÉn ƒë·∫øn trang thanh to√°n!", {
      position: "top-right",
      autoClose: 2000,
    });

    navigate("/order");
  };

  const totalPrice = cartItems
    .filter((item) => item.checked)
    .reduce((total, item) => total + (item.price || 0) * (item.quantity || 1), 0);

  return (
    <div className="shopping-cart">
      <header className="cart-header">
        <h2 className="cart-title">üõí Gi·ªè H√†ng C·ªßa B·∫°n</h2>
      </header>

      {loading ? (
        <p className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : (
        <div className="cart-content">
          <div className="cart-items-container">
            {cartItems.length > 0 ? (
              cartItems.map((item) => (
                <div key={item.id} className="cart-item">
                  <input
                    type="checkbox"
                    className="item-checkbox"
                    checked={item.checked || false}
                    onChange={() => toggleCheckbox(item.id)}
                  />
                  <img
                    src={item.image ? `http://localhost:4000/uploads/${item.image}` : "/default-image.jpg"}
                    alt={item.name}
                    className="item-image"
                    onError={(e) => (e.target.src = "/default-image.jpg")}
                  />
                  <div className="item-details">
                    <p className="item-name">{item.name}</p>
                    <p className="item-price">
                      {new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(item.price || 0)}
                    </p>
                  </div>
                  <div className="item-quantity">
                    <button className="quantity-btn" onClick={() => updateQuantity(item.id, -1)}>
                      -
                    </button>
                    <input type="number" value={item.quantity || 1} readOnly className="quantity-input" />
                    <button className="quantity-btn" onClick={() => updateQuantity(item.id, 1)}>
                      +
                    </button>
                  </div>
                  <button className="remove-item" onClick={() => removeItem(item.id)}>
                    ‚úñ
                  </button>
                </div>
              ))
            ) : (
              <p className="empty-cart">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng! üõí</p>
            )}
          </div>

          <div className="order-summary">
            <h3 className="cart-title">üìã T√≥m T·∫Øt ƒê∆°n H√†ng</h3>
            <p className="order-total">T·ªïng: {totalPrice.toLocaleString()} VND</p>
            <div className="order-actions">
              <button className="checkout-btn" disabled={totalPrice === 0} onClick={handleCheckout}>
                Thanh To√°n
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cart;

const express = require("express");
const router = express.Router();
const pool = require("../db"); // Import connection pool MySQL
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// üîπ ƒêƒÉng k√Ω t√†i kho·∫£n
router.post("/register", async (req, res) => {
    try {
        const { fullname, email, password } = req.body;

        // L·∫•y k·∫øt n·ªëi t·ª´ pool
        const connection = await pool.getConnection();

        try {
            // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            const [result] = await connection.query("SELECT * FROM users WHERE email = ?", [email]);
            if (result.length > 0) return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i!" });

            // M√£ h√≥a m·∫≠t kh·∫©u
            const hashedPassword = await bcrypt.hash(password, 10);

            // Ch√®n ng∆∞·ªùi d√πng v√†o DB
            const sql = "INSERT INTO users (fullname, email, password) VALUES (?, ?, ?)";
            await connection.query(sql, [fullname, email, hashedPassword]);

            res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
        } finally {
            connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
        }
    } catch (err) {
        console.error("L·ªói register:", err);
        return res.status(500).json({ error: err.message });
    }
});

// üîπ ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!" });
        }

        // L·∫•y k·∫øt n·ªëi t·ª´ pool
        const connection = await pool.getConnection();

        try {
            // T√¨m ng∆∞·ªùi d√πng theo email
            const [result] = await connection.query("SELECT * FROM users WHERE email = ?", [email]);

            if (result.length === 0) {
                return res.status(400).json({ error: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
            }

            const user = result[0];

            // Ki·ªÉm tra m·∫≠t kh·∫©u (ph·∫£i d√πng await v√¨ bcrypt.compare() l√† async)
            const isMatch = await bcrypt.compare(password, user.password);
            if (!isMatch) {
                return res.status(400).json({ error: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
            }

            // T·∫°o token JWT (n√™n l∆∞u SECRET_KEY trong bi·∫øn m√¥i tr∆∞·ªùng)
            const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET || "SECRET_KEY", {
                expiresIn: "1h",
            });

            res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token, user });
        } finally {
            connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
        }
    } catch (error) {
        console.error("L·ªói login:", error);
        res.status(500).json({ error: "L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau." });
    }
});

// üîπ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token
router.get("/profile", async (req, res) => {
    try {
        const token = req.headers.authorization;

        // Ki·ªÉm tra xem token c√≥ t·ªìn t·∫°i trong header hay kh√¥ng
        if (!token) return res.status(401).json({ error: "Kh√¥ng c√≥ token!" });

        // T√°ch "Bearer " kh·ªèi token
        const tokenString = token.split(' ')[1]; // L·∫•y ph·∫ßn token sau "Bearer"

        jwt.verify(tokenString, process.env.JWT_SECRET || "SECRET_KEY", async (err, decoded) => {
            if (err) return res.status(403).json({ error: "Token kh√¥ng h·ª£p l·ªá!" });

            // L·∫•y k·∫øt n·ªëi t·ª´ pool
            const connection = await pool.getConnection();
            try {
                // Truy v·∫•n d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ database
                const [result] = await connection.query("SELECT id, fullname, email, created_at FROM users WHERE id = ?", [decoded.id]);

                if (result.length === 0) {
                    return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
                }

                res.json(result[0]);
            } finally {
                connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
            }
        });
    } catch (error) {
        console.error("L·ªói profile:", error);
        res.status(500).json({ error: "L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau." });
    }
});

// üîπ C·∫≠p nh·∫≠t t√†i kho·∫£n ng∆∞·ªùi d√πng
router.put("/edit-account", async (req, res) => {
    try {
        const { id, fullname, email, newPassword } = req.body;

        if (!id) return res.status(400).json({ error: "Thi·∫øu ID ng∆∞·ªùi d√πng!" });

        // L·∫•y k·∫øt n·ªëi t·ª´ pool
        const connection = await pool.getConnection();

        try {
            // Ki·ªÉm tra xem email c√≥ tr√πng v·ªõi ng∆∞·ªùi d√πng kh√°c kh√¥ng
            const [result] = await connection.query("SELECT * FROM users WHERE email = ? AND id != ?", [email, id]);
            if (result.length > 0) return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });

            let updateQuery = "UPDATE users SET fullname = ?, email = ? WHERE id = ?";
            let params = [fullname, email, id];

            // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi, hash l·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            if (newPassword) {
                const hashedPassword = await bcrypt.hash(newPassword, 10);
                updateQuery = "UPDATE users SET fullname = ?, email = ?, password = ? WHERE id = ?";
                params = [fullname, email, hashedPassword, id];
            }

            await connection.query(updateQuery, params);

            res.json({ message: "C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!" });
        } finally {
            connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
        }
    } catch (error) {
        console.error("L·ªói edit-account:", error);
        res.status(500).json({ error: "L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau." });
    }
});

module.exports = router;
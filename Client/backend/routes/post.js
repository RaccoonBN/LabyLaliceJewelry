const express = require('express');
const router = express.Router();
const pool = require('../db'); // Import connection pool MySQL
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// üü¢ C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u file v√†o th∆∞ m·ª•c `public/uploads/`
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadPath = path.join(__dirname, "../../../Server/backend/public/uploads/");
        if (!fs.existsSync(uploadPath)) {
            fs.mkdirSync(uploadPath, { recursive: true });
        }
        cb(null, uploadPath);
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    },
});

const upload = multer({ storage });

// üü¢ API ƒëƒÉng b√†i vi·∫øt (S·ª≠ d·ª•ng Pool v√† Promise)
router.post("/create", upload.single("image"), async (req, res) => {
    let connection; // Khai b√°o bi·∫øn connection
    try {
        connection = await pool.getConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool
        const { user_id, title, content } = req.body;
        const image = req.file ? req.file.filename : null;

        if (!user_id || !title || !content) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b√†i vi·∫øt" });
        }

        const sql = image
            ? "INSERT INTO blogs (user_id, title, content, image, created_at) VALUES (?, ?, ?, ?, NOW())"
            : "INSERT INTO blogs (user_id, title, content, created_at) VALUES (?, ?, ?, NOW())";

        const params = image ? [user_id, title, content, image] : [user_id, title, content];

        const [result] = await connection.execute(sql, params);
        res.status(201).json({ message: "‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c ƒëƒÉng", blog_id: result.insertId });

    } catch (err) {
        console.error("‚ùå L·ªói khi ƒëƒÉng b√†i:", err);
        return res.status(500).json({ error: "L·ªói khi ƒëƒÉng b√†i", details: err.message });
    } finally {
        if (connection) {
            connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
        }
    }
});


// üü¢ API L·∫•y danh s√°ch b√†i vi·∫øt k√®m ·∫£nh
router.get('/blogs', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const sql = `
            SELECT b.*, u.fullname AS author, COUNT(bl.id) AS likes 
            FROM blogs b 
            LEFT JOIN users u ON b.user_id = u.id  -- L·∫•y fullname t·ª´ b·∫£ng users
            LEFT JOIN blog_likes bl ON b.id = bl.blog_id 
            GROUP BY b.id, u.fullname 
            ORDER BY b.created_at DESC;
        `;

        const [results] = await connection.execute(sql);

        // X·ª≠ l√Ω h√¨nh ·∫£nh: n·∫øu kh√¥ng c√≥ ·∫£nh th√¨ d√πng ·∫£nh m·∫∑c ƒë·ªãnh
        const formattedResults = results.map(blog => ({
            ...blog,
            image: blog.image
                ? `http://localhost:4000/uploads/${blog.image}`  // ‚úÖ ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
                : "/default-blog.jpg",  // ‚úÖ ·∫¢nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ ·∫£nh
        }));

        console.log("‚úÖ D·ªØ li·ªáu b√†i vi·∫øt sau khi x·ª≠ l√Ω:", formattedResults);
        res.json(formattedResults);

    } catch (err) {
        console.error("üî• L·ªói truy v·∫•n SQL:", err);
        return res.status(500).json({ message: "L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu", error: err });
    } finally {
        if (connection) {
            connection.release();
        }
    }
});


// üü¢ API Like / Unlike b√†i vi·∫øt
router.post('/blogs/:blog_id/like', async (req, res) => {
    let connection; // Khai b√°o bi·∫øn connection
    try {
        connection = await pool.getConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool

        const { user_id } = req.body;
        const { blog_id } = req.params;

        console.log("üìå D·ªØ li·ªáu nh·∫≠n t·ª´ client:", { user_id, blog_id });

        if (!user_id) {
            return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin user_id' });
        }
        if (!blog_id || isNaN(blog_id)) {
            return res.status(400).json({ error: 'blog_id kh√¥ng h·ª£p l·ªá' });
        }

        // ‚úÖ Ki·ªÉm tra xem user ƒë√£ like b√†i vi·∫øt ch∆∞a
        const [rows] = await connection.execute( // L·∫•y d·ªØ li·ªáu t·ª´ rows
            'SELECT * FROM blog_likes WHERE user_id = ? AND blog_id = ?',
            [user_id, blog_id]
        );

        console.log("üü¢ K·∫øt qu·∫£ truy v·∫•n blog_likes:", rows);

        if (rows.length > 0) {
            // N·∫øu ƒë√£ like, th√¨ unlike
            await connection.execute(
                'DELETE FROM blog_likes WHERE user_id = ? AND blog_id = ?',
                [user_id, blog_id]
            );
            console.log("üîÑ Ng∆∞·ªùi d√πng ƒë√£ b·ªè like b√†i vi·∫øt.");
            return res.json({ message: 'ƒê√£ b·ªè like b√†i vi·∫øt' });
        }

        // N·∫øu ch∆∞a like, th√¨ th√™m v√†o b·∫£ng
        await connection.execute(
            'INSERT INTO blog_likes (user_id, blog_id, created_at) VALUES (?, ?, NOW())',
            [user_id, blog_id]
        );
        console.log("‚ù§Ô∏è Ng∆∞·ªùi d√πng ƒë√£ like b√†i vi·∫øt.");
        return res.json({ message: 'ƒê√£ like b√†i vi·∫øt' });

    } catch (error) {
        console.error("‚ùå L·ªói khi th·ª±c hi·ªán thao t√°c like:", error);
        return res.status(500).json({
            error: 'L·ªói khi th·ª±c hi·ªán thao t√°c like',
            details: error.message
        });
    } finally {
        if (connection) {
            connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
        }
    }
});

// üü¢ API L·∫•y chi ti·∫øt b√†i vi·∫øt
router.get('/blogs/:blog_id', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const { blog_id } = req.params;

        if (!blog_id || isNaN(blog_id)) {
            return res.status(400).json({ error: 'blog_id kh√¥ng h·ª£p l·ªá' });
        }

        const sql = `
            SELECT b.*, u.fullname AS author, COUNT(bl.id) AS likes 
            FROM blogs b
            LEFT JOIN users u ON b.user_id = u.id
            LEFT JOIN blog_likes bl ON b.id = bl.blog_id
            WHERE b.id = ?
            GROUP BY b.id, u.fullname;
        `;

        const [result] = await connection.execute(sql, [blog_id]);

        if (result.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });
        }

        const blog = result[0];
        blog.image = blog.image
            ? `http://localhost:4000/uploads/${blog.image}`
            : "/default-blog.jpg";

        res.json(blog);

    } catch (err) {
        console.error("üî• L·ªói truy v·∫•n SQL:", err);
        return res.status(500).json({ error: "L·ªói truy v·∫•n c∆° s·ªü d·ªØ li·ªáu" });
    } finally {
        if (connection) {
            connection.release();
        }
    }
});

// üü¢ API ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ like b√†i vi·∫øt hay ch∆∞a
router.get('/blogs/:blog_id/isLiked', async (req, res) => {
    let connection;
    try {
        connection = await pool.getConnection();
        const { blog_id } = req.params;
        const { user_id } = req.query;

        if (!user_id) {
            return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin user_id' });
        }
        if (!blog_id || isNaN(blog_id)) {
            return res.status(400).json({ error: 'blog_id kh√¥ng h·ª£p l·ªá' });
        }

        const [rows] = await connection.execute(
            'SELECT * FROM blog_likes WHERE user_id = ? AND blog_id = ?',
            [user_id, blog_id]
        );

        const isLiked = rows.length > 0;
        res.json({ isLiked });
    } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i like:", error);
        return res.status(500).json({ error: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i like" });
    } finally {
        if (connection) {
            connection.release();
        }
    }
});
module.exports = router;
const express = require("express");
const router = express.Router();
const pool = require("../db"); // Import connection pool

// üõí API: L·∫•y danh s√°ch s·∫£n ph·∫©m (c√≥ th·ªÉ l·ªçc theo collection_id V√Ä t√¨m ki·∫øm)
router.get("/", async (req, res) => {
  let connection;
  try {
    connection = await pool.getConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool
    const collection_id = req.query.collection_id;
    const query = req.query.q; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ query params

    let sqlQuery = `
      SELECT 
        p.id, p.name, p.description, p.price, p.stock, p.image, 
        p.category_id, c.name AS category_name, 
        p.collection_id, col.name AS collection_name
      FROM products p
      LEFT JOIN categories c ON p.category_id = c.id
      LEFT JOIN collections col ON p.collection_id = col.id
      WHERE 1=1 -- ƒêi·ªÅu ki·ªán lu√¥n ƒë√∫ng ƒë·ªÉ d·ªÖ d√†ng th√™m c√°c ƒëi·ªÅu ki·ªán kh√°c
    `;

    let params = [];

    if (collection_id) {
      sqlQuery += " AND p.collection_id = ?";
      params.push(collection_id);
    }

    if (query) {
      sqlQuery += " AND (p.name LIKE ? OR c.name LIKE ? OR col.name LIKE ?)";
      params.push(`%${query}%`);
      params.push(`%${query}%`);
      params.push(`%${query}%`);
    }

    const [results] = await connection.execute(sqlQuery, params);

    // X·ª≠ l√Ω ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ ·∫£nh
    const formattedResults = results.map(product => {
      product.image = product.image
        ? `http://localhost:4000/uploads/${product.image}`
        : "/default-image.jpg";
      return product;
    });

    res.json(formattedResults);
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", err);
    return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m" });
  } finally {
    if (connection) {
      connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
    }
  }
});

// üõç API: L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID (k√®m ƒë√°nh gi√° & s·∫£n ph·∫©m li√™n quan)
router.get("/:id", async (req, res) => {
  let connection;
  try {
    connection = await pool.getConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool
    const productId = req.params.id;

    const productQuery = `
      SELECT p.id, p.name, p.description, p.price, p.stock, p.image, 
             p.category_id, p.collection_id, 
             c.name AS category_name, col.name AS collection_name,
             COUNT(r.id) AS review_count, 
             IFNULL(AVG(r.rating), 0) AS avg_rating
      FROM products p
      LEFT JOIN categories c ON p.category_id = c.id
      LEFT JOIN collections col ON p.collection_id = col.id
      LEFT JOIN reviews r ON p.id = r.product_id
      WHERE p.id = ?
      GROUP BY p.id;
    `;

    const [productResults] = await connection.execute(productQuery, [productId]);

    if (productResults.length === 0) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i." });
    }

    let product = productResults[0];
    product.avg_rating = Number(product.avg_rating) || 0;

    // Truy v·∫•n s·∫£n ph·∫©m li√™n quan (c√πng danh m·ª•c ho·∫∑c b·ªô s∆∞u t·∫≠p)
    const relatedProductsQuery = `
      SELECT id, name, description, price, stock, image 
      FROM products
      WHERE (category_id = ? OR collection_id = ?) AND id != ?
    `;

    const [relatedProducts] = await connection.execute(relatedProductsQuery, [product.category_id, product.collection_id, productId]);

    // Truy v·∫•n ƒë√°nh gi√° s·∫£n ph·∫©m
    const reviewQuery = `
      SELECT r.id, r.user_id, r.product_id, r.rating, r.comment, r.created_at, 
             u.fullname AS username
      FROM reviews r
      JOIN users u ON r.user_id = u.id
      WHERE r.product_id = ?
      ORDER BY r.created_at DESC;
    `;

    const [reviews] = await connection.execute(reviewQuery, [productId]);

    res.json({ product, relatedProducts, reviews });
  } catch (err) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", err);
    return res.status(500).json({ error: "L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m" });
  } finally {
    if (connection) {
      connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
    }
  }
});

// **LO·∫†I B·ªé API N√ÄY**
// // üîç API: T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n, danh m·ª•c ho·∫∑c b·ªô s∆∞u t·∫≠p
// router.get("/search", async (req, res) => {
//   let connection;
//   try {
//     connection = await pool.getConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool
//     const { query } = req.query;
//     if (!query) {
//       return res.json([]);
//     }

//     const searchQuery = `
//       SELECT p.id, p.name, p.image, p.price, c.name AS category_name, col.name AS collection_name
//       FROM products p
//       LEFT JOIN categories c ON p.category_id = c.id
//       LEFT JOIN collections col ON p.collection_id = col.id
//       WHERE p.name LIKE ? 
//          OR c.name LIKE ? 
//          OR col.name LIKE ? 
//     `;

//     const [results] = await connection.execute(searchQuery, [`%${query}%`, `%${query}%`, `%${query}%`]);

//     res.json(results);
//   } catch (err) {
//     console.error("L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:", err);
//     return res.status(500).json({ error: "L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m" });
//   } finally {
//     if (connection) {
//       connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
//     }
//   }
// });

module.exports = router;